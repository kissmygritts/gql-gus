type WildlifeEvent {
  id: ID
  species_id: ID
  event_start_timestamp: DateTime
  event_end_timestamp: DateTime
  x: Float
  y: Float
  source_app: String
  common_name: String
  species_name: String
  species_group: String
  wildlife_encounters: [WildlifeEncounter]
  wildlife_abundance: WildlifeAbundance
}

type WildlifeEncounter {
  encounter_uuid: ID
  animal_uuid: ID
  ind_id: String
  life_status: String
  age_class: String
  sex: String
  n: Int
}

type WildlifeAbundance {
  event_uuid: ID
  male: Int
  female: Int
  unk: Int
}

type Query {
  # getObservationFeed (
  #   filter: ObservationFeedFilterInput
  #   limit: OffsetPaginationInput
  # ): [WildlifeEvent]
  getObservationFeed (
    filter: ObservationFeedFilterInput
    limit: OffsetPaginationInput
  ): [ObservationFeed]
}

input ObservationFeedFilterInput {
  common_name: StringFilterInput
  species_name: StringFilterInput
  source_app: StringFilterInput
  life_status: StringFilterInput
  age_class: StringFilterInput
  sex: StringFilterInput
}

# observation feed, new
type ObservationFeed {
  id: ID
  event_start_timestamp: DateTime
  source_app: String
  event_type: String
  x: Float
  y: Float
  encounters_observation_feed: [EncountersObservationFeed]
}

type EncountersObservationFeed {
  id: ID
  common_name: String
  species_name: String
  ind_id: String
  life_status: String
  age_class: String
  sex: String
  n: Int
}